{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, withKeys as _withKeys, withDirectives as _withDirectives, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, normalizeStyle as _normalizeStyle, createStaticVNode as _createStaticVNode } from \"vue\";\nconst _hoisted_1 = {\n  ref: \"graphContainer\",\n  class: \"graph-container\"\n};\nconst _hoisted_2 = {\n  class: \"controls\"\n};\nconst _hoisted_3 = {\n  class: \"search-box\"\n};\nconst _hoisted_4 = {\n  class: \"sliders\"\n};\nconst _hoisted_5 = {\n  class: \"slider-container\"\n};\nconst _hoisted_6 = {\n  class: \"slider-container\"\n};\nconst _hoisted_7 = {\n  class: \"view-controls\"\n};\nconst _hoisted_8 = {\n  key: 0,\n  class: \"node-details\"\n};\nconst _hoisted_9 = {\n  key: 0\n};\nconst _hoisted_10 = {\n  key: 1\n};\nconst _hoisted_11 = {\n  key: 2,\n  class: \"core-table\"\n};\nconst _hoisted_12 = {\n  key: 3,\n  class: \"confidence\"\n};\nconst _hoisted_13 = {\n  class: \"confidence-bar\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"div\", _hoisted_1, null, 512 /* NEED_PATCH */), _createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $setup.searchTerm = $event),\n    type: \"text\",\n    placeholder: \"搜索节点...\",\n    onKeyup: _cache[1] || (_cache[1] = _withKeys((...args) => $setup.searchNode && $setup.searchNode(...args), [\"enter\"]))\n  }, null, 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelText, $setup.searchTerm]]), _createElementVNode(\"button\", {\n    onClick: _cache[2] || (_cache[2] = (...args) => $setup.searchNode && $setup.searchNode(...args))\n  }, \"搜索\")]), _createElementVNode(\"div\", _hoisted_4, [_createElementVNode(\"div\", _hoisted_5, [_createElementVNode(\"label\", null, \"调用链深度: \" + _toDisplayString($setup.depth), 1 /* TEXT */), _withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[3] || (_cache[3] = $event => $setup.depth = $event),\n    type: \"range\",\n    min: \"1\",\n    max: \"5\",\n    onChange: _cache[4] || (_cache[4] = (...args) => $setup.depthChanged && $setup.depthChanged(...args))\n  }, null, 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelText, $setup.depth, void 0, {\n    number: true\n  }]])]), _createElementVNode(\"div\", _hoisted_6, [_createElementVNode(\"label\", null, \"置信度阈值: \" + _toDisplayString($setup.confidenceThreshold.toFixed(1)), 1 /* TEXT */), _withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[5] || (_cache[5] = $event => $setup.confidenceThreshold = $event),\n    type: \"range\",\n    min: \"0\",\n    max: \"1\",\n    step: \"0.1\",\n    onChange: _cache[6] || (_cache[6] = (...args) => $setup.confidenceChanged && $setup.confidenceChanged(...args))\n  }, null, 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelText, $setup.confidenceThreshold, void 0, {\n    number: true\n  }]])])]), _createElementVNode(\"div\", _hoisted_7, [_createElementVNode(\"button\", {\n    onClick: _cache[7] || (_cache[7] = (...args) => $setup.toggleView && $setup.toggleView(...args))\n  }, _toDisplayString($setup.is3D ? '2D 视图' : '3D 视图'), 1 /* TEXT */), _createElementVNode(\"button\", {\n    onClick: _cache[8] || (_cache[8] = (...args) => $setup.resetCamera && $setup.resetCamera(...args))\n  }, \"重置视图\"), _createElementVNode(\"button\", {\n    onClick: _cache[9] || (_cache[9] = (...args) => $setup.exportImage && $setup.exportImage(...args))\n  }, \"导出图像\")]), _cache[13] || (_cache[13] = _createStaticVNode(\"<div class=\\\"legend\\\" data-v-8106b282><div class=\\\"legend-item\\\" data-v-8106b282><div class=\\\"color-box sp-color\\\" data-v-8106b282></div><span data-v-8106b282>存储过程</span></div><div class=\\\"legend-item\\\" data-v-8106b282><div class=\\\"color-box table-color\\\" data-v-8106b282></div><span data-v-8106b282>表</span></div><div class=\\\"legend-item\\\" data-v-8106b282><div class=\\\"color-box dyn-table-color\\\" data-v-8106b282></div><span data-v-8106b282>动态表</span></div><div class=\\\"legend-item\\\" data-v-8106b282><div class=\\\"color-box calls-color\\\" data-v-8106b282></div><span data-v-8106b282>调用关系</span></div><div class=\\\"legend-item\\\" data-v-8106b282><div class=\\\"color-box ref-color\\\" data-v-8106b282></div><span data-v-8106b282>引用关系</span></div></div>\", 1))]), $setup.selectedNode ? (_openBlock(), _createElementBlock(\"div\", _hoisted_8, [_createElementVNode(\"h3\", null, _toDisplayString($setup.selectedNode.name), 1 /* TEXT */), _createElementVNode(\"p\", null, [_cache[14] || (_cache[14] = _createElementVNode(\"strong\", null, \"类型:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString($setup.selectedNode.type), 1 /* TEXT */)]), $setup.selectedNode.schema ? (_openBlock(), _createElementBlock(\"p\", _hoisted_9, [_cache[15] || (_cache[15] = _createElementVNode(\"strong\", null, \"模式:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString($setup.selectedNode.schema), 1 /* TEXT */)])) : _createCommentVNode(\"v-if\", true), $setup.selectedNode.type === 'SP' ? (_openBlock(), _createElementBlock(\"p\", _hoisted_10, [_cache[16] || (_cache[16] = _createElementVNode(\"strong\", null, \"复杂度:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString($setup.selectedNode.complexity), 1 /* TEXT */)])) : _createCommentVNode(\"v-if\", true), $setup.selectedNode.type === 'TABLE' && $setup.selectedNode.is_core ? (_openBlock(), _createElementBlock(\"p\", _hoisted_11, \"核心表\")) : _createCommentVNode(\"v-if\", true), $setup.selectedNode.confidence ? (_openBlock(), _createElementBlock(\"div\", _hoisted_12, [_createElementVNode(\"p\", null, [_cache[17] || (_cache[17] = _createElementVNode(\"strong\", null, \"置信度:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString(($setup.selectedNode.confidence * 100).toFixed(0)) + \"%\", 1 /* TEXT */)]), _createElementVNode(\"div\", _hoisted_13, [_createElementVNode(\"div\", {\n    class: \"confidence-fill\",\n    style: _normalizeStyle({\n      width: $setup.selectedNode.confidence * 100 + '%'\n    })\n  }, null, 4 /* STYLE */)])])) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"button\", {\n    onClick: _cache[10] || (_cache[10] = $event => $setup.loadDetails($setup.selectedNode.id))\n  }, \"加载详细信息\"), _createElementVNode(\"button\", {\n    onClick: _cache[11] || (_cache[11] = $event => $setup.analyzeImpact($setup.selectedNode.id))\n  }, \"影响分析\"), _createElementVNode(\"button\", {\n    onClick: _cache[12] || (_cache[12] = (...args) => $setup.closeDetails && $setup.closeDetails(...args))\n  }, \"关闭\")])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["ref","class","key","_createElementBlock","_createElementVNode","_hoisted_1","_hoisted_2","_hoisted_3","_cache","$event","$setup","searchTerm","type","placeholder","onKeyup","_withKeys","args","searchNode","onClick","_hoisted_4","_hoisted_5","_toDisplayString","depth","min","max","onChange","depthChanged","number","_hoisted_6","confidenceThreshold","toFixed","step","confidenceChanged","_hoisted_7","toggleView","is3D","resetCamera","exportImage","_createStaticVNode","selectedNode","_hoisted_8","name","_createTextVNode","schema","_hoisted_9","_createCommentVNode","_hoisted_10","complexity","is_core","_hoisted_11","confidence","_hoisted_12","_hoisted_13","style","_normalizeStyle","width","loadDetails","id","analyzeImpact","closeDetails"],"sources":["/mnt/c/gitProjects/workProjects/oracle-plus/frontend/src/components/Graph3D.vue"],"sourcesContent":["// frontend/src/components/Graph3D.vue\r\n<template>\r\n  <div>\r\n    <div ref=\"graphContainer\" class=\"graph-container\"></div>\r\n    <div class=\"controls\">\r\n      <div class=\"search-box\">\r\n        <input \r\n          v-model=\"searchTerm\" \r\n          type=\"text\" \r\n          placeholder=\"搜索节点...\"\r\n          @keyup.enter=\"searchNode\"\r\n        />\r\n        <button @click=\"searchNode\">搜索</button>\r\n      </div>\r\n      <div class=\"sliders\">\r\n        <div class=\"slider-container\">\r\n          <label>调用链深度: {{ depth }}</label>\r\n          <input \r\n            v-model.number=\"depth\" \r\n            type=\"range\" \r\n            min=\"1\" \r\n            max=\"5\" \r\n            @change=\"depthChanged\"\r\n          />\r\n        </div>\r\n        <div class=\"slider-container\">\r\n          <label>置信度阈值: {{ confidenceThreshold.toFixed(1) }}</label>\r\n          <input \r\n            v-model.number=\"confidenceThreshold\" \r\n            type=\"range\" \r\n            min=\"0\" \r\n            max=\"1\" \r\n            step=\"0.1\"\r\n            @change=\"confidenceChanged\"\r\n          />\r\n        </div>\r\n      </div>\r\n      <div class=\"view-controls\">\r\n        <button @click=\"toggleView\">{{ is3D ? '2D 视图' : '3D 视图' }}</button>\r\n        <button @click=\"resetCamera\">重置视图</button>\r\n        <button @click=\"exportImage\">导出图像</button>\r\n      </div>\r\n      <div class=\"legend\">\r\n        <div class=\"legend-item\">\r\n          <div class=\"color-box sp-color\"></div>\r\n          <span>存储过程</span>\r\n        </div>\r\n        <div class=\"legend-item\">\r\n          <div class=\"color-box table-color\"></div>\r\n          <span>表</span>\r\n        </div>\r\n        <div class=\"legend-item\">\r\n          <div class=\"color-box dyn-table-color\"></div>\r\n          <span>动态表</span>\r\n        </div>\r\n        <div class=\"legend-item\">\r\n          <div class=\"color-box calls-color\"></div>\r\n          <span>调用关系</span>\r\n        </div>\r\n        <div class=\"legend-item\">\r\n          <div class=\"color-box ref-color\"></div>\r\n          <span>引用关系</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div v-if=\"selectedNode\" class=\"node-details\">\r\n      <h3>{{ selectedNode.name }}</h3>\r\n      <p><strong>类型:</strong> {{ selectedNode.type }}</p>\r\n      <p v-if=\"selectedNode.schema\"><strong>模式:</strong> {{ selectedNode.schema }}</p>\r\n      <p v-if=\"selectedNode.type === 'SP'\"><strong>复杂度:</strong> {{ selectedNode.complexity }}</p>\r\n      <p v-if=\"selectedNode.type === 'TABLE' && selectedNode.is_core\" class=\"core-table\">核心表</p>\r\n      <div v-if=\"selectedNode.confidence\" class=\"confidence\">\r\n        <p><strong>置信度:</strong> {{ (selectedNode.confidence * 100).toFixed(0) }}%</p>\r\n        <div class=\"confidence-bar\">\r\n          <div class=\"confidence-fill\" :style=\"{ width: (selectedNode.confidence * 100) + '%' }\"></div>\r\n        </div>\r\n      </div>\r\n      <button @click=\"loadDetails(selectedNode.id)\">加载详细信息</button>\r\n      <button @click=\"analyzeImpact(selectedNode.id)\">影响分析</button>\r\n      <button @click=\"closeDetails\">关闭</button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ForceGraph3D } from 'three-forcegraph';\r\nimport { ForceGraph2D } from 'force-graph';\r\nimport SpriteText from 'three-spritetext';\r\nimport * as THREE from 'three';\r\nimport { ref, onMounted, onBeforeUnmount } from 'vue';\r\nimport { saveAs } from 'file-saver';\r\n\r\nexport default {\r\n  name: 'Graph3D',\r\n  props: {\r\n    initialData: {\r\n// frontend/src/components/Graph3D.vue (continued)\r\ntype: Object,\r\n      required: true\r\n    },\r\n    apiBaseUrl: {\r\n      type: String,\r\n      default: '/api'\r\n    }\r\n  },\r\n  setup(props) {\r\n    const graphContainer = ref(null);\r\n    const searchTerm = ref('');\r\n    const selectedNode = ref(null);\r\n    const graph = ref(null);\r\n    const graphData = ref({ nodes: [], links: [] });\r\n    const depth = ref(3);\r\n    const confidenceThreshold = ref(0.5);\r\n    const is3D = ref(true);\r\n    \r\n    // 初始化图谱\r\n    onMounted(() => {\r\n      initGraph();\r\n      if (props.initialData) {\r\n        loadData(props.initialData);\r\n      }\r\n    });\r\n    \r\n    // 清理资源\r\n    onBeforeUnmount(() => {\r\n      if (graph.value) {\r\n        graph.value._destructor();\r\n      }\r\n    });\r\n    \r\n    // 初始化图谱\r\n    const initGraph = () => {\r\n      const container = graphContainer.value;\r\n      if (!container) return;\r\n      \r\n      if (is3D.value) {\r\n        // 3D 图谱\r\n        graph.value = ForceGraph3D()\r\n          .backgroundColor('#111')\r\n          .nodeLabel(node => getNodeTooltip(node))\r\n          .nodeColor(node => getNodeColor(node))\r\n          .nodeThreeObject(node => createNodeObject(node))\r\n          .linkLabel(link => getLinkTooltip(link))\r\n          .linkColor(link => getLinkColor(link))\r\n          .linkWidth(link => getLinkWidth(link))\r\n          .linkDirectionalArrowLength(5)\r\n          .linkDirectionalArrowRelPos(1)\r\n          .linkDirectionalParticles(link => link.type === 'CALLS' ? 3 : 1)\r\n          .linkDirectionalParticleSpeed(0.003)\r\n          .onNodeClick(handleNodeClick)\r\n          .onBackgroundClick(clearSelection)(container);\r\n      } else {\r\n        // 2D 图谱\r\n        graph.value = ForceGraph2D()\r\n          .backgroundColor('#111')\r\n          .nodeLabel(node => getNodeTooltip(node))\r\n          .nodeColor(node => getNodeColor(node))\r\n          .nodeCanvasObject((node, ctx, globalScale) => createNodeCanvas(node, ctx, globalScale))\r\n          .linkLabel(link => getLinkTooltip(link))\r\n          .linkColor(link => getLinkColor(link))\r\n          .linkWidth(link => getLinkWidth(link))\r\n          .linkDirectionalArrowLength(5)\r\n          .linkDirectionalArrowRelPos(1)\r\n          .linkDirectionalParticles(link => link.type === 'CALLS' ? 3 : 1)\r\n          .linkDirectionalParticleSpeed(0.003)\r\n          .onNodeClick(handleNodeClick)\r\n          .onBackgroundClick(clearSelection)(container);\r\n      }\r\n      \r\n      // 设置初始视角\r\n      if (is3D.value) {\r\n        graph.value.cameraPosition({ z: 250 });\r\n      }\r\n    };\r\n    \r\n    // 加载图谱数据\r\n    const loadData = (data) => {\r\n      graphData.value = data;\r\n      graph.value.graphData(data);\r\n    };\r\n    \r\n    // 获取节点颜色\r\n    const getNodeColor = (node) => {\r\n      if (node.type === 'SP') return '#e74c3c';  // 红色\r\n      if (node.type === 'TABLE') return '#3498db'; // 蓝色\r\n      if (node.type === 'DYN_TABLE') return '#f39c12'; // 橙色\r\n      return '#95a5a6'; // 默认灰色\r\n    };\r\n    \r\n    // 获取链接颜色\r\n    const getLinkColor = (link) => {\r\n      if (link.confidence < confidenceThreshold.value) {\r\n        return '#e74c3c'; // 红色，置信度低\r\n      }\r\n      if (link.type === 'CALLS') return '#9b59b6'; // 紫色\r\n      if (link.type === 'REFERENCES') return '#2ecc71'; // 绿色\r\n      if (link.type === 'DYN_REFERENCES') return '#f39c12'; // 橙色\r\n      return '#95a5a6'; // 默认灰色\r\n    };\r\n    \r\n    // 获取链接宽度\r\n    const getLinkWidth = (link) => {\r\n      return (link.confidence || 0.5) * 3; // 根据置信度调整宽度\r\n    };\r\n    \r\n    // 创建节点对象（3D）\r\n    const createNodeObject = (node) => {\r\n      // 使用SpriteText显示节点名称\r\n      const sprite = new SpriteText(node.name);\r\n      sprite.color = getNodeColor(node);\r\n      sprite.textHeight = 8;\r\n      sprite.backgroundColor = 'rgba(0,0,0,0.7)';\r\n      sprite.padding = 2;\r\n      sprite.borderRadius = 3;\r\n      \r\n      // 创建节点球体\r\n      const geometry = new THREE.SphereGeometry(node.type === 'SP' ? 5 : 4);\r\n      const material = new THREE.MeshLambertMaterial({\r\n        color: getNodeColor(node),\r\n        transparent: true,\r\n        opacity: node.confidence || 1\r\n      });\r\n      const mesh = new THREE.Mesh(geometry, material);\r\n      \r\n      // 组合成一个组\r\n      const group = new THREE.Group();\r\n      group.add(mesh);\r\n      \r\n      // 将文本精灵放在球体上方\r\n      sprite.position.y = 8;\r\n      group.add(sprite);\r\n      \r\n      return group;\r\n    };\r\n    \r\n    // 创建节点画布（2D）\r\n    const createNodeCanvas = (node, ctx, globalScale) => {\r\n      const size = node.type === 'SP' ? 10 : 8;\r\n      const fontSize = 12 / globalScale;\r\n      const label = node.name;\r\n      \r\n      // 绘制节点\r\n      ctx.beginPath();\r\n      ctx.arc(node.x, node.y, size, 0, 2 * Math.PI);\r\n      ctx.fillStyle = getNodeColor(node);\r\n      ctx.fill();\r\n      \r\n      // 绘制边框\r\n      ctx.strokeStyle = '#ffffff';\r\n      ctx.lineWidth = 0.5;\r\n      ctx.stroke();\r\n      \r\n      // 绘制文本\r\n      ctx.font = `${fontSize}px Sans-Serif`;\r\n      ctx.textAlign = 'center';\r\n      ctx.textBaseline = 'middle';\r\n      ctx.fillStyle = '#ffffff';\r\n      ctx.fillText(label, node.x, node.y - size - fontSize);\r\n    };\r\n    \r\n    // 获取节点提示文本\r\n    const getNodeTooltip = (node) => {\r\n      let tooltip = `<div class=\"tooltip\">`;\r\n      tooltip += `<div class=\"title\">${node.name}</div>`;\r\n      tooltip += `<div class=\"type\">${node.type}</div>`;\r\n      \r\n      if (node.type === 'SP') {\r\n        tooltip += `<div>复杂度: ${node.complexity || 'N/A'}</div>`;\r\n        if (node.last_modified) {\r\n          tooltip += `<div>最后修改: ${node.last_modified}</div>`;\r\n        }\r\n      }\r\n      \r\n      if (node.type === 'TABLE' || node.type === 'DYN_TABLE') {\r\n        if (node.schema) {\r\n          tooltip += `<div>模式: ${node.schema}</div>`;\r\n        }\r\n        if (node.is_core) {\r\n          tooltip += `<div class=\"warning\">核心表</div>`;\r\n        }\r\n      }\r\n      \r\n      if (node.confidence) {\r\n        tooltip += `<div>置信度: ${(node.confidence * 100).toFixed(0)}%</div>`;\r\n      }\r\n      \r\n      tooltip += `</div>`;\r\n      return tooltip;\r\n    };\r\n    \r\n    // 获取链接提示文本\r\n    const getLinkTooltip = (link) => {\r\n      let tooltip = `<div class=\"tooltip\">`;\r\n      tooltip += `<div class=\"title\">${link.type}</div>`;\r\n      \r\n      if (link.type === 'CALLS') {\r\n        tooltip += `<div>深度: ${link.depth || 1}</div>`;\r\n        if (link.frequency) {\r\n          tooltip += `<div>频率: ${link.frequency}</div>`;\r\n        }\r\n      }\r\n      \r\n      if (link.type === 'REFERENCES' || link.type === 'DYN_REFERENCES') {\r\n        if (link.operation) {\r\n          tooltip += `<div>操作: ${link.operation}</div>`;\r\n        }\r\n        if (link.type === 'DYN_REFERENCES' && link.need_verify) {\r\n          tooltip += `<div class=\"warning\">需要验证</div>`;\r\n        }\r\n      }\r\n      \r\n      if (link.confidence) {\r\n        tooltip += `<div>置信度: ${(link.confidence * 100).toFixed(0)}%</div>`;\r\n      }\r\n      \r\n      tooltip += `</div>`;\r\n      return tooltip;\r\n    };\r\n    \r\n    // 处理节点点击事件\r\n    const handleNodeClick = (node) => {\r\n      selectedNode.value = node;\r\n      highlightNode(node);\r\n    };\r\n    \r\n    // 清除选择\r\n    const clearSelection = () => {\r\n      selectedNode.value = null;\r\n      resetHighlight();\r\n    };\r\n    \r\n    // 高亮节点及相关链接\r\n    const highlightNode = (node) => {\r\n      const { nodes, links } = graphData.value;\r\n      \r\n      // 重置所有节点和链接的透明度\r\n      nodes.forEach(n => {\r\n        n.__highlighted = false;\r\n        n.__opacity = 0.2;\r\n      });\r\n      \r\n      links.forEach(l => {\r\n        l.__highlighted = false;\r\n        l.__opacity = 0.1;\r\n      });\r\n      \r\n      // 高亮选中的节点\r\n      node.__highlighted = true;\r\n      node.__opacity = 1;\r\n      \r\n      // 查找相关链接和节点\r\n      const connectedLinks = links.filter(l => l.source === node || l.target === node);\r\n      connectedLinks.forEach(l => {\r\n        l.__highlighted = true;\r\n        l.__opacity = 1;\r\n        \r\n        // 高亮链接的另一端节点\r\n        const connectedNode = l.source === node ? l.target : l.source;\r\n        connectedNode.__highlighted = true;\r\n        connectedNode.__opacity = 0.8;\r\n      });\r\n      \r\n      // 更新图谱\r\n      updateNodesAppearance();\r\n    };\r\n    \r\n    // 重置高亮\r\n    const resetHighlight = () => {\r\n      const { nodes, links } = graphData.value;\r\n      \r\n      nodes.forEach(n => {\r\n        n.__highlighted = false;\r\n        n.__opacity = 1;\r\n      });\r\n      \r\n      links.forEach(l => {\r\n        l.__highlighted = false;\r\n        l.__opacity = 1;\r\n      });\r\n      \r\n      updateNodesAppearance();\r\n    };\r\n    \r\n    // 更新节点外观\r\n    const updateNodesAppearance = () => {\r\n      if (is3D.value) {\r\n        // 更新3D节点\r\n        graph.value\r\n          .nodeThreeObjectExtend(false)\r\n          .nodeThreeObject(node => createNodeObject(node))\r\n          .linkOpacity(link => link.__opacity !== undefined ? link.__opacity : 1);\r\n      } else {\r\n        // 更新2D节点\r\n        graph.value\r\n          .nodeCanvasObject((node, ctx, globalScale) => createNodeCanvas(node, ctx, globalScale))\r\n          .linkOpacity(link => link.__opacity !== undefined ? link.__opacity : 1);\r\n      }\r\n    };\r\n    \r\n    // 搜索节点\r\n    const searchNode = async () => {\r\n      if (!searchTerm.value) return;\r\n      \r\n      try {\r\n        const response = await fetch(`${props.apiBaseUrl}/search?keyword=${encodeURIComponent(searchTerm.value)}`);\r\n        const data = await response.json();\r\n        \r\n        if (data.procedures && data.procedures.length > 0) {\r\n          // 找到匹配的节点\r\n          const procedure = data.procedures[0];\r\n          const node = graphData.value.nodes.find(n => n.name === procedure.name);\r\n          \r\n          if (node) {\r\n            // 高亮节点\r\n            handleNodeClick(node);\r\n            \r\n            // 聚焦到节点\r\n            const distance = is3D.value ? 100 : 250;\r\n            graph.value.centerAt(node.x, node.y, distance);\r\n            \r\n            if (is3D.value) {\r\n              graph.value.cameraPosition(\r\n                { x: node.x, y: node.y, z: distance },\r\n                node,\r\n                2000\r\n              );\r\n            }\r\n          } else {\r\n            // 如果节点不在当前图谱中，加载该节点的调用链\r\n            loadCallChain(procedure.name);\r\n          }\r\n        } else {\r\n          alert('未找到匹配的节点');\r\n        }\r\n      } catch (error) {\r\n        console.error('搜索失败', error);\r\n        alert('搜索失败，请重试');\r\n      }\r\n    };\r\n    \r\n    // 加载调用链\r\n    const loadCallChain = async (nodeName) => {\r\n      try {\r\n        const response = await fetch(\r\n          `${props.apiBaseUrl}/call-chain/${nodeName}?depth=${depth.value}&confidence=${confidenceThreshold.value}`\r\n        );\r\n        const data = await response.json();\r\n        \r\n        // 加载新数据\r\n        loadData(data);\r\n        \r\n        // 查找并高亮目标节点\r\n        const node = data.nodes.find(n => n.name === nodeName);\r\n        if (node) {\r\n          handleNodeClick(node);\r\n        }\r\n      } catch (error) {\r\n        console.error('加载调用链失败', error);\r\n        alert('加载调用链失败，请重试');\r\n      }\r\n    };\r\n    \r\n    // 加载节点详细信息\r\n    const loadDetails = async (nodeId) => {\r\n      try {\r\n        const node = graphData.value.nodes.find(n => n.id === nodeId);\r\n        if (!node) return;\r\n        \r\n        const response = await fetch(`${props.apiBaseUrl}/procedure/${node.name}`);\r\n        const data = await response.json();\r\n        \r\n        // 显示详细信息（可以在这里添加更多逻辑）\r\n        alert(`${node.name} 详细信息\\n调用的存储过程: ${data.called_sps.length}\\n引用的表: ${data.referenced_tables.length}`);\r\n      } catch (error) {\r\n        console.error('加载详细信息失败', error);\r\n        alert('加载详细信息失败，请重试');\r\n      }\r\n    };\r\n    \r\n    // 分析影响\r\n    const analyzeImpact = async (nodeId) => {\r\n      try {\r\n        const node = graphData.value.nodes.find(n => n.id === nodeId);\r\n        if (!node) return;\r\n        \r\n        const response = await fetch(`${props.apiBaseUrl}/impact/${node.name}?depth=${depth.value}`);\r\n        const data = await response.json();\r\n        \r\n        // 显示影响分析结果\r\n        alert(`${node.name} 影响分析\\n受影响节点总数: ${data.total_affected}\\n受影响存储过程: ${data.affected_sps}\\n受影响表: ${data.affected_tables}`);\r\n      } catch (error) {\r\n        console.error('影响分析失败', error);\r\n        alert('影响分析失败，请重试');\r\n      }\r\n    };\r\n    \r\n    // 调用链深度改变\r\n    const depthChanged = () => {\r\n      if (selectedNode.value) {\r\n        loadCallChain(selectedNode.value.name);\r\n      }\r\n    };\r\n    \r\n    // 置信度阈值改变\r\n    const confidenceChanged = () => {\r\n      // 更新链接颜色和宽度\r\n      const { links } = graphData.value;\r\n      links.forEach(link => {\r\n        link.__opacity = link.confidence >= confidenceThreshold.value ? 1 : 0.3;\r\n      });\r\n      \r\n      updateNodesAppearance();\r\n    };\r\n    \r\n    // 切换2D/3D视图\r\n    const toggleView = () => {\r\n      is3D.value = !is3D.value;\r\n      \r\n      // 保存当前数据\r\n      const currentData = graphData.value;\r\n      \r\n      // 清理当前图谱\r\n      if (graph.value) {\r\n        graph.value._destructor();\r\n      }\r\n      \r\n      // 重新初始化\r\n      initGraph();\r\n      \r\n      // 重新加载数据\r\n      loadData(currentData);\r\n    };\r\n    \r\n    // 重置相机位置\r\n    const resetCamera = () => {\r\n      if (is3D.value) {\r\n        graph.value.cameraPosition({ x: 0, y: 0, z: 250 }, { x: 0, y: 0, z: 0 }, 1000);\r\n      } else {\r\n        graph.value.centerAt(0, 0, 1000);\r\n        graph.value.zoom(1, 1000);\r\n      }\r\n    };\r\n    \r\n    // 导出图像\r\n    const exportImage = () => {\r\n      try {\r\n        const canvas = graphContainer.value.querySelector('canvas');\r\n        if (!canvas) return;\r\n        \r\n        canvas.toBlob(blob => {\r\n          saveAs(blob, `oracle-sp-graph-${new Date().toISOString().slice(0, 10)}.png`);\r\n        });\r\n      } catch (error) {\r\n        console.error('导出图像失败', error);\r\n        alert('导出图像失败，请重试');\r\n      }\r\n    };\r\n    \r\n    // 关闭详细信息面板\r\n    const closeDetails = () => {\r\n      selectedNode.value = null;\r\n    };\r\n    \r\n    return {\r\n      graphContainer,\r\n      searchTerm,\r\n      selectedNode,\r\n      depth,\r\n      confidenceThreshold,\r\n      is3D,\r\n      searchNode,\r\n      loadDetails,\r\n      analyzeImpact,\r\n      closeDetails,\r\n      depthChanged,\r\n      confidenceChanged,\r\n      toggleView,\r\n      resetCamera,\r\n      exportImage\r\n    };\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.graph-container {\r\n  width: 100%;\r\n  height: 80vh;\r\n  background-color: #111;\r\n  position: relative;\r\n}\r\n\r\n.controls {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 10px;\r\n  padding: 10px;\r\n  background-color: #f8f9fa;\r\n  border-bottom: 1px solid #dee2e6;\r\n}\r\n\r\n.search-box {\r\n  display: flex;\r\n  gap: 5px;\r\n}\r\n\r\n.search-box input {\r\n  padding: 5px 10px;\r\n  border: 1px solid #ced4da;\r\n  border-radius: 4px;\r\n  width: 200px;\r\n}\r\n\r\n.sliders {\r\n  display: flex;\r\n  gap: 20px;\r\n}\r\n\r\n.slider-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 150px;\r\n}\r\n\r\n.view-controls {\r\n  display: flex;\r\n  gap: 5px;\r\n}\r\n\r\nbutton {\r\n  padding: 5px 10px;\r\n  background-color: #007bff;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n}\r\n\r\nbutton:hover {\r\n  background-color: #0069d9;\r\n}\r\n\r\n.legend {\r\n  display: flex;\r\n  gap: 15px;\r\n  margin-left: auto;\r\n}\r\n\r\n.legend-item {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 5px;\r\n}\r\n\r\n.color-box {\r\n  width: 15px;\r\n  height: 15px;\r\n  border-radius: 3px;\r\n}\r\n\r\n.sp-color {\r\n  background-color: #e74c3c;\r\n}\r\n\r\n.table-color {\r\n  background-color: #3498db;\r\n}\r\n\r\n.dyn-table-color {\r\n  background-color: #f39c12;\r\n}\r\n\r\n.calls-color {\r\n  background-color: #9b59b6;\r\n}\r\n\r\n.ref-color {\r\n  background-color: #2ecc71;\r\n}\r\n\r\n.node-details {\r\n  position: absolute;\r\n  top: 20px;\r\n  right: 20px;\r\n  background-color: rgba(255, 255, 255, 0.9);\r\n  border-radius: 5px;\r\n  padding: 15px;\r\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);\r\n  max-width: 300px;\r\n}\r\n\r\n.node-details h3 {\r\n  margin-top: 0;\r\n  border-bottom: 1px solid #ddd;\r\n  padding-bottom: 5px;\r\n}\r\n\r\n.core-table {\r\n  color: #e74c3c;\r\n  font-weight: bold;\r\n}\r\n\r\n.confidence {\r\n  margin: 10px 0;\r\n}\r\n\r\n.confidence-bar {\r\n  height: 8px;\r\n  background-color: #e9ecef;\r\n  border-radius: 4px;\r\n  overflow: hidden;\r\n}\r\n\r\n.confidence-fill {\r\n  height: 100%;\r\n  background-color: #28a745;\r\n  border-radius: 4px;\r\n}\r\n\r\n.tooltip {\r\n  background-color: rgba(0, 0, 0, 0.8);\r\n  color: white;\r\n  padding: 8px;\r\n  border-radius: 4px;\r\n  font-size: 12px;\r\n  max-width: 200px;\r\n}\r\n\r\n.tooltip .title {\r\n  font-weight: bold;\r\n  margin-bottom: 5px;\r\n}\r\n\r\n.tooltip .type {\r\n  font-style: italic;\r\n  color: #aaa;\r\n  margin-bottom: 5px;\r\n}\r\n\r\n.tooltip .warning {\r\n  color: #f39c12;\r\n  font-weight: bold;\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}