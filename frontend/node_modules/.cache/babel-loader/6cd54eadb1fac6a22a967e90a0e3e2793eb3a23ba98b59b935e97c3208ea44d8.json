{"ast":null,"code":"import { ForceGraph3D } from 'three-forcegraph';\nimport { ForceGraph2D } from 'force-graph';\nimport SpriteText from 'three-spritetext';\nimport * as THREE from 'three';\nimport { ref, onMounted, onBeforeUnmount } from 'vue';\nimport { saveAs } from 'file-saver';\nexport default {\n  name: 'Graph3D',\n  props: {\n    initialData: {\n      // frontend/src/components/Graph3D.vue (continued)\n      type: Object,\n      required: true\n    },\n    apiBaseUrl: {\n      type: String,\n      default: '/api'\n    }\n  },\n  setup(props) {\n    const graphContainer = ref(null);\n    const searchTerm = ref('');\n    const selectedNode = ref(null);\n    const graph = ref(null);\n    const graphData = ref({\n      nodes: [],\n      links: []\n    });\n    const depth = ref(3);\n    const confidenceThreshold = ref(0.5);\n    const is3D = ref(true);\n\n    // 初始化图谱\n    onMounted(() => {\n      initGraph();\n      if (props.initialData) {\n        loadData(props.initialData);\n      }\n    });\n\n    // 清理资源\n    onBeforeUnmount(() => {\n      if (graph.value) {\n        graph.value._destructor();\n      }\n    });\n\n    // 初始化图谱\n    const initGraph = () => {\n      const container = graphContainer.value;\n      if (!container) return;\n      if (is3D.value) {\n        // 3D 图谱\n        graph.value = ForceGraph3D().backgroundColor('#111').nodeLabel(node => getNodeTooltip(node)).nodeColor(node => getNodeColor(node)).nodeThreeObject(node => createNodeObject(node)).linkLabel(link => getLinkTooltip(link)).linkColor(link => getLinkColor(link)).linkWidth(link => getLinkWidth(link)).linkDirectionalArrowLength(5).linkDirectionalArrowRelPos(1).linkDirectionalParticles(link => link.type === 'CALLS' ? 3 : 1).linkDirectionalParticleSpeed(0.003).onNodeClick(handleNodeClick).onBackgroundClick(clearSelection)(container);\n      } else {\n        // 2D 图谱\n        graph.value = ForceGraph2D().backgroundColor('#111').nodeLabel(node => getNodeTooltip(node)).nodeColor(node => getNodeColor(node)).nodeCanvasObject((node, ctx, globalScale) => createNodeCanvas(node, ctx, globalScale)).linkLabel(link => getLinkTooltip(link)).linkColor(link => getLinkColor(link)).linkWidth(link => getLinkWidth(link)).linkDirectionalArrowLength(5).linkDirectionalArrowRelPos(1).linkDirectionalParticles(link => link.type === 'CALLS' ? 3 : 1).linkDirectionalParticleSpeed(0.003).onNodeClick(handleNodeClick).onBackgroundClick(clearSelection)(container);\n      }\n\n      // 设置初始视角\n      if (is3D.value) {\n        graph.value.cameraPosition({\n          z: 250\n        });\n      }\n    };\n\n    // 加载图谱数据\n    const loadData = data => {\n      graphData.value = data;\n      graph.value.graphData(data);\n    };\n\n    // 获取节点颜色\n    const getNodeColor = node => {\n      if (node.type === 'SP') return '#e74c3c'; // 红色\n      if (node.type === 'TABLE') return '#3498db'; // 蓝色\n      if (node.type === 'DYN_TABLE') return '#f39c12'; // 橙色\n      return '#95a5a6'; // 默认灰色\n    };\n\n    // 获取链接颜色\n    const getLinkColor = link => {\n      if (link.confidence < confidenceThreshold.value) {\n        return '#e74c3c'; // 红色，置信度低\n      }\n      if (link.type === 'CALLS') return '#9b59b6'; // 紫色\n      if (link.type === 'REFERENCES') return '#2ecc71'; // 绿色\n      if (link.type === 'DYN_REFERENCES') return '#f39c12'; // 橙色\n      return '#95a5a6'; // 默认灰色\n    };\n\n    // 获取链接宽度\n    const getLinkWidth = link => {\n      return (link.confidence || 0.5) * 3; // 根据置信度调整宽度\n    };\n\n    // 创建节点对象（3D）\n    const createNodeObject = node => {\n      // 使用SpriteText显示节点名称\n      const sprite = new SpriteText(node.name);\n      sprite.color = getNodeColor(node);\n      sprite.textHeight = 8;\n      sprite.backgroundColor = 'rgba(0,0,0,0.7)';\n      sprite.padding = 2;\n      sprite.borderRadius = 3;\n\n      // 创建节点球体\n      const geometry = new THREE.SphereGeometry(node.type === 'SP' ? 5 : 4);\n      const material = new THREE.MeshLambertMaterial({\n        color: getNodeColor(node),\n        transparent: true,\n        opacity: node.confidence || 1\n      });\n      const mesh = new THREE.Mesh(geometry, material);\n\n      // 组合成一个组\n      const group = new THREE.Group();\n      group.add(mesh);\n\n      // 将文本精灵放在球体上方\n      sprite.position.y = 8;\n      group.add(sprite);\n      return group;\n    };\n\n    // 创建节点画布（2D）\n    const createNodeCanvas = (node, ctx, globalScale) => {\n      const size = node.type === 'SP' ? 10 : 8;\n      const fontSize = 12 / globalScale;\n      const label = node.name;\n\n      // 绘制节点\n      ctx.beginPath();\n      ctx.arc(node.x, node.y, size, 0, 2 * Math.PI);\n      ctx.fillStyle = getNodeColor(node);\n      ctx.fill();\n\n      // 绘制边框\n      ctx.strokeStyle = '#ffffff';\n      ctx.lineWidth = 0.5;\n      ctx.stroke();\n\n      // 绘制文本\n      ctx.font = `${fontSize}px Sans-Serif`;\n      ctx.textAlign = 'center';\n      ctx.textBaseline = 'middle';\n      ctx.fillStyle = '#ffffff';\n      ctx.fillText(label, node.x, node.y - size - fontSize);\n    };\n\n    // 获取节点提示文本\n    const getNodeTooltip = node => {\n      let tooltip = `<div class=\"tooltip\">`;\n      tooltip += `<div class=\"title\">${node.name}</div>`;\n      tooltip += `<div class=\"type\">${node.type}</div>`;\n      if (node.type === 'SP') {\n        tooltip += `<div>复杂度: ${node.complexity || 'N/A'}</div>`;\n        if (node.last_modified) {\n          tooltip += `<div>最后修改: ${node.last_modified}</div>`;\n        }\n      }\n      if (node.type === 'TABLE' || node.type === 'DYN_TABLE') {\n        if (node.schema) {\n          tooltip += `<div>模式: ${node.schema}</div>`;\n        }\n        if (node.is_core) {\n          tooltip += `<div class=\"warning\">核心表</div>`;\n        }\n      }\n      if (node.confidence) {\n        tooltip += `<div>置信度: ${(node.confidence * 100).toFixed(0)}%</div>`;\n      }\n      tooltip += `</div>`;\n      return tooltip;\n    };\n\n    // 获取链接提示文本\n    const getLinkTooltip = link => {\n      let tooltip = `<div class=\"tooltip\">`;\n      tooltip += `<div class=\"title\">${link.type}</div>`;\n      if (link.type === 'CALLS') {\n        tooltip += `<div>深度: ${link.depth || 1}</div>`;\n        if (link.frequency) {\n          tooltip += `<div>频率: ${link.frequency}</div>`;\n        }\n      }\n      if (link.type === 'REFERENCES' || link.type === 'DYN_REFERENCES') {\n        if (link.operation) {\n          tooltip += `<div>操作: ${link.operation}</div>`;\n        }\n        if (link.type === 'DYN_REFERENCES' && link.need_verify) {\n          tooltip += `<div class=\"warning\">需要验证</div>`;\n        }\n      }\n      if (link.confidence) {\n        tooltip += `<div>置信度: ${(link.confidence * 100).toFixed(0)}%</div>`;\n      }\n      tooltip += `</div>`;\n      return tooltip;\n    };\n\n    // 处理节点点击事件\n    const handleNodeClick = node => {\n      selectedNode.value = node;\n      highlightNode(node);\n    };\n\n    // 清除选择\n    const clearSelection = () => {\n      selectedNode.value = null;\n      resetHighlight();\n    };\n\n    // 高亮节点及相关链接\n    const highlightNode = node => {\n      const {\n        nodes,\n        links\n      } = graphData.value;\n\n      // 重置所有节点和链接的透明度\n      nodes.forEach(n => {\n        n.__highlighted = false;\n        n.__opacity = 0.2;\n      });\n      links.forEach(l => {\n        l.__highlighted = false;\n        l.__opacity = 0.1;\n      });\n\n      // 高亮选中的节点\n      node.__highlighted = true;\n      node.__opacity = 1;\n\n      // 查找相关链接和节点\n      const connectedLinks = links.filter(l => l.source === node || l.target === node);\n      connectedLinks.forEach(l => {\n        l.__highlighted = true;\n        l.__opacity = 1;\n\n        // 高亮链接的另一端节点\n        const connectedNode = l.source === node ? l.target : l.source;\n        connectedNode.__highlighted = true;\n        connectedNode.__opacity = 0.8;\n      });\n\n      // 更新图谱\n      updateNodesAppearance();\n    };\n\n    // 重置高亮\n    const resetHighlight = () => {\n      const {\n        nodes,\n        links\n      } = graphData.value;\n      nodes.forEach(n => {\n        n.__highlighted = false;\n        n.__opacity = 1;\n      });\n      links.forEach(l => {\n        l.__highlighted = false;\n        l.__opacity = 1;\n      });\n      updateNodesAppearance();\n    };\n\n    // 更新节点外观\n    const updateNodesAppearance = () => {\n      if (is3D.value) {\n        // 更新3D节点\n        graph.value.nodeThreeObjectExtend(false).nodeThreeObject(node => createNodeObject(node)).linkOpacity(link => link.__opacity !== undefined ? link.__opacity : 1);\n      } else {\n        // 更新2D节点\n        graph.value.nodeCanvasObject((node, ctx, globalScale) => createNodeCanvas(node, ctx, globalScale)).linkOpacity(link => link.__opacity !== undefined ? link.__opacity : 1);\n      }\n    };\n\n    // 搜索节点\n    const searchNode = async () => {\n      if (!searchTerm.value) return;\n      try {\n        const response = await fetch(`${props.apiBaseUrl}/search?keyword=${encodeURIComponent(searchTerm.value)}`);\n        const data = await response.json();\n        if (data.procedures && data.procedures.length > 0) {\n          // 找到匹配的节点\n          const procedure = data.procedures[0];\n          const node = graphData.value.nodes.find(n => n.name === procedure.name);\n          if (node) {\n            // 高亮节点\n            handleNodeClick(node);\n\n            // 聚焦到节点\n            const distance = is3D.value ? 100 : 250;\n            graph.value.centerAt(node.x, node.y, distance);\n            if (is3D.value) {\n              graph.value.cameraPosition({\n                x: node.x,\n                y: node.y,\n                z: distance\n              }, node, 2000);\n            }\n          } else {\n            // 如果节点不在当前图谱中，加载该节点的调用链\n            loadCallChain(procedure.name);\n          }\n        } else {\n          alert('未找到匹配的节点');\n        }\n      } catch (error) {\n        console.error('搜索失败', error);\n        alert('搜索失败，请重试');\n      }\n    };\n\n    // 加载调用链\n    const loadCallChain = async nodeName => {\n      try {\n        const response = await fetch(`${props.apiBaseUrl}/call-chain/${nodeName}?depth=${depth.value}&confidence=${confidenceThreshold.value}`);\n        const data = await response.json();\n\n        // 加载新数据\n        loadData(data);\n\n        // 查找并高亮目标节点\n        const node = data.nodes.find(n => n.name === nodeName);\n        if (node) {\n          handleNodeClick(node);\n        }\n      } catch (error) {\n        console.error('加载调用链失败', error);\n        alert('加载调用链失败，请重试');\n      }\n    };\n\n    // 加载节点详细信息\n    const loadDetails = async nodeId => {\n      try {\n        const node = graphData.value.nodes.find(n => n.id === nodeId);\n        if (!node) return;\n        const response = await fetch(`${props.apiBaseUrl}/procedure/${node.name}`);\n        const data = await response.json();\n\n        // 显示详细信息（可以在这里添加更多逻辑）\n        alert(`${node.name} 详细信息\\n调用的存储过程: ${data.called_sps.length}\\n引用的表: ${data.referenced_tables.length}`);\n      } catch (error) {\n        console.error('加载详细信息失败', error);\n        alert('加载详细信息失败，请重试');\n      }\n    };\n\n    // 分析影响\n    const analyzeImpact = async nodeId => {\n      try {\n        const node = graphData.value.nodes.find(n => n.id === nodeId);\n        if (!node) return;\n        const response = await fetch(`${props.apiBaseUrl}/impact/${node.name}?depth=${depth.value}`);\n        const data = await response.json();\n\n        // 显示影响分析结果\n        alert(`${node.name} 影响分析\\n受影响节点总数: ${data.total_affected}\\n受影响存储过程: ${data.affected_sps}\\n受影响表: ${data.affected_tables}`);\n      } catch (error) {\n        console.error('影响分析失败', error);\n        alert('影响分析失败，请重试');\n      }\n    };\n\n    // 调用链深度改变\n    const depthChanged = () => {\n      if (selectedNode.value) {\n        loadCallChain(selectedNode.value.name);\n      }\n    };\n\n    // 置信度阈值改变\n    const confidenceChanged = () => {\n      // 更新链接颜色和宽度\n      const {\n        links\n      } = graphData.value;\n      links.forEach(link => {\n        link.__opacity = link.confidence >= confidenceThreshold.value ? 1 : 0.3;\n      });\n      updateNodesAppearance();\n    };\n\n    // 切换2D/3D视图\n    const toggleView = () => {\n      is3D.value = !is3D.value;\n\n      // 保存当前数据\n      const currentData = graphData.value;\n\n      // 清理当前图谱\n      if (graph.value) {\n        graph.value._destructor();\n      }\n\n      // 重新初始化\n      initGraph();\n\n      // 重新加载数据\n      loadData(currentData);\n    };\n\n    // 重置相机位置\n    const resetCamera = () => {\n      if (is3D.value) {\n        graph.value.cameraPosition({\n          x: 0,\n          y: 0,\n          z: 250\n        }, {\n          x: 0,\n          y: 0,\n          z: 0\n        }, 1000);\n      } else {\n        graph.value.centerAt(0, 0, 1000);\n        graph.value.zoom(1, 1000);\n      }\n    };\n\n    // 导出图像\n    const exportImage = () => {\n      try {\n        const canvas = graphContainer.value.querySelector('canvas');\n        if (!canvas) return;\n        canvas.toBlob(blob => {\n          saveAs(blob, `oracle-sp-graph-${new Date().toISOString().slice(0, 10)}.png`);\n        });\n      } catch (error) {\n        console.error('导出图像失败', error);\n        alert('导出图像失败，请重试');\n      }\n    };\n\n    // 关闭详细信息面板\n    const closeDetails = () => {\n      selectedNode.value = null;\n    };\n    return {\n      graphContainer,\n      searchTerm,\n      selectedNode,\n      depth,\n      confidenceThreshold,\n      is3D,\n      searchNode,\n      loadDetails,\n      analyzeImpact,\n      closeDetails,\n      depthChanged,\n      confidenceChanged,\n      toggleView,\n      resetCamera,\n      exportImage\n    };\n  }\n};","map":{"version":3,"names":["ForceGraph3D","ForceGraph2D","SpriteText","THREE","ref","onMounted","onBeforeUnmount","saveAs","name","props","initialData","type","Object","required","apiBaseUrl","String","default","setup","graphContainer","searchTerm","selectedNode","graph","graphData","nodes","links","depth","confidenceThreshold","is3D","initGraph","loadData","value","_destructor","container","backgroundColor","nodeLabel","node","getNodeTooltip","nodeColor","getNodeColor","nodeThreeObject","createNodeObject","linkLabel","link","getLinkTooltip","linkColor","getLinkColor","linkWidth","getLinkWidth","linkDirectionalArrowLength","linkDirectionalArrowRelPos","linkDirectionalParticles","linkDirectionalParticleSpeed","onNodeClick","handleNodeClick","onBackgroundClick","clearSelection","nodeCanvasObject","ctx","globalScale","createNodeCanvas","cameraPosition","z","data","confidence","sprite","color","textHeight","padding","borderRadius","geometry","SphereGeometry","material","MeshLambertMaterial","transparent","opacity","mesh","Mesh","group","Group","add","position","y","size","fontSize","label","beginPath","arc","x","Math","PI","fillStyle","fill","strokeStyle","lineWidth","stroke","font","textAlign","textBaseline","fillText","tooltip","complexity","last_modified","schema","is_core","toFixed","frequency","operation","need_verify","highlightNode","resetHighlight","forEach","n","__highlighted","__opacity","l","connectedLinks","filter","source","target","connectedNode","updateNodesAppearance","nodeThreeObjectExtend","linkOpacity","undefined","searchNode","response","fetch","encodeURIComponent","json","procedures","length","procedure","find","distance","centerAt","loadCallChain","alert","error","console","nodeName","loadDetails","nodeId","id","called_sps","referenced_tables","analyzeImpact","total_affected","affected_sps","affected_tables","depthChanged","confidenceChanged","toggleView","currentData","resetCamera","zoom","exportImage","canvas","querySelector","toBlob","blob","Date","toISOString","slice","closeDetails"],"sources":["/mnt/c/gitProjects/workProjects/oracle-plus/frontend/src/components/Graph3D.vue"],"sourcesContent":["// frontend/src/components/Graph3D.vue\r\n<template>\r\n  <div>\r\n    <div ref=\"graphContainer\" class=\"graph-container\"></div>\r\n    <div class=\"controls\">\r\n      <div class=\"search-box\">\r\n        <input \r\n          v-model=\"searchTerm\" \r\n          type=\"text\" \r\n          placeholder=\"搜索节点...\"\r\n          @keyup.enter=\"searchNode\"\r\n        />\r\n        <button @click=\"searchNode\">搜索</button>\r\n      </div>\r\n      <div class=\"sliders\">\r\n        <div class=\"slider-container\">\r\n          <label>调用链深度: {{ depth }}</label>\r\n          <input \r\n            v-model.number=\"depth\" \r\n            type=\"range\" \r\n            min=\"1\" \r\n            max=\"5\" \r\n            @change=\"depthChanged\"\r\n          />\r\n        </div>\r\n        <div class=\"slider-container\">\r\n          <label>置信度阈值: {{ confidenceThreshold.toFixed(1) }}</label>\r\n          <input \r\n            v-model.number=\"confidenceThreshold\" \r\n            type=\"range\" \r\n            min=\"0\" \r\n            max=\"1\" \r\n            step=\"0.1\"\r\n            @change=\"confidenceChanged\"\r\n          />\r\n        </div>\r\n      </div>\r\n      <div class=\"view-controls\">\r\n        <button @click=\"toggleView\">{{ is3D ? '2D 视图' : '3D 视图' }}</button>\r\n        <button @click=\"resetCamera\">重置视图</button>\r\n        <button @click=\"exportImage\">导出图像</button>\r\n      </div>\r\n      <div class=\"legend\">\r\n        <div class=\"legend-item\">\r\n          <div class=\"color-box sp-color\"></div>\r\n          <span>存储过程</span>\r\n        </div>\r\n        <div class=\"legend-item\">\r\n          <div class=\"color-box table-color\"></div>\r\n          <span>表</span>\r\n        </div>\r\n        <div class=\"legend-item\">\r\n          <div class=\"color-box dyn-table-color\"></div>\r\n          <span>动态表</span>\r\n        </div>\r\n        <div class=\"legend-item\">\r\n          <div class=\"color-box calls-color\"></div>\r\n          <span>调用关系</span>\r\n        </div>\r\n        <div class=\"legend-item\">\r\n          <div class=\"color-box ref-color\"></div>\r\n          <span>引用关系</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div v-if=\"selectedNode\" class=\"node-details\">\r\n      <h3>{{ selectedNode.name }}</h3>\r\n      <p><strong>类型:</strong> {{ selectedNode.type }}</p>\r\n      <p v-if=\"selectedNode.schema\"><strong>模式:</strong> {{ selectedNode.schema }}</p>\r\n      <p v-if=\"selectedNode.type === 'SP'\"><strong>复杂度:</strong> {{ selectedNode.complexity }}</p>\r\n      <p v-if=\"selectedNode.type === 'TABLE' && selectedNode.is_core\" class=\"core-table\">核心表</p>\r\n      <div v-if=\"selectedNode.confidence\" class=\"confidence\">\r\n        <p><strong>置信度:</strong> {{ (selectedNode.confidence * 100).toFixed(0) }}%</p>\r\n        <div class=\"confidence-bar\">\r\n          <div class=\"confidence-fill\" :style=\"{ width: (selectedNode.confidence * 100) + '%' }\"></div>\r\n        </div>\r\n      </div>\r\n      <button @click=\"loadDetails(selectedNode.id)\">加载详细信息</button>\r\n      <button @click=\"analyzeImpact(selectedNode.id)\">影响分析</button>\r\n      <button @click=\"closeDetails\">关闭</button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ForceGraph3D } from 'three-forcegraph';\r\nimport { ForceGraph2D } from 'force-graph';\r\nimport SpriteText from 'three-spritetext';\r\nimport * as THREE from 'three';\r\nimport { ref, onMounted, onBeforeUnmount } from 'vue';\r\nimport { saveAs } from 'file-saver';\r\n\r\nexport default {\r\n  name: 'Graph3D',\r\n  props: {\r\n    initialData: {\r\n// frontend/src/components/Graph3D.vue (continued)\r\ntype: Object,\r\n      required: true\r\n    },\r\n    apiBaseUrl: {\r\n      type: String,\r\n      default: '/api'\r\n    }\r\n  },\r\n  setup(props) {\r\n    const graphContainer = ref(null);\r\n    const searchTerm = ref('');\r\n    const selectedNode = ref(null);\r\n    const graph = ref(null);\r\n    const graphData = ref({ nodes: [], links: [] });\r\n    const depth = ref(3);\r\n    const confidenceThreshold = ref(0.5);\r\n    const is3D = ref(true);\r\n    \r\n    // 初始化图谱\r\n    onMounted(() => {\r\n      initGraph();\r\n      if (props.initialData) {\r\n        loadData(props.initialData);\r\n      }\r\n    });\r\n    \r\n    // 清理资源\r\n    onBeforeUnmount(() => {\r\n      if (graph.value) {\r\n        graph.value._destructor();\r\n      }\r\n    });\r\n    \r\n    // 初始化图谱\r\n    const initGraph = () => {\r\n      const container = graphContainer.value;\r\n      if (!container) return;\r\n      \r\n      if (is3D.value) {\r\n        // 3D 图谱\r\n        graph.value = ForceGraph3D()\r\n          .backgroundColor('#111')\r\n          .nodeLabel(node => getNodeTooltip(node))\r\n          .nodeColor(node => getNodeColor(node))\r\n          .nodeThreeObject(node => createNodeObject(node))\r\n          .linkLabel(link => getLinkTooltip(link))\r\n          .linkColor(link => getLinkColor(link))\r\n          .linkWidth(link => getLinkWidth(link))\r\n          .linkDirectionalArrowLength(5)\r\n          .linkDirectionalArrowRelPos(1)\r\n          .linkDirectionalParticles(link => link.type === 'CALLS' ? 3 : 1)\r\n          .linkDirectionalParticleSpeed(0.003)\r\n          .onNodeClick(handleNodeClick)\r\n          .onBackgroundClick(clearSelection)(container);\r\n      } else {\r\n        // 2D 图谱\r\n        graph.value = ForceGraph2D()\r\n          .backgroundColor('#111')\r\n          .nodeLabel(node => getNodeTooltip(node))\r\n          .nodeColor(node => getNodeColor(node))\r\n          .nodeCanvasObject((node, ctx, globalScale) => createNodeCanvas(node, ctx, globalScale))\r\n          .linkLabel(link => getLinkTooltip(link))\r\n          .linkColor(link => getLinkColor(link))\r\n          .linkWidth(link => getLinkWidth(link))\r\n          .linkDirectionalArrowLength(5)\r\n          .linkDirectionalArrowRelPos(1)\r\n          .linkDirectionalParticles(link => link.type === 'CALLS' ? 3 : 1)\r\n          .linkDirectionalParticleSpeed(0.003)\r\n          .onNodeClick(handleNodeClick)\r\n          .onBackgroundClick(clearSelection)(container);\r\n      }\r\n      \r\n      // 设置初始视角\r\n      if (is3D.value) {\r\n        graph.value.cameraPosition({ z: 250 });\r\n      }\r\n    };\r\n    \r\n    // 加载图谱数据\r\n    const loadData = (data) => {\r\n      graphData.value = data;\r\n      graph.value.graphData(data);\r\n    };\r\n    \r\n    // 获取节点颜色\r\n    const getNodeColor = (node) => {\r\n      if (node.type === 'SP') return '#e74c3c';  // 红色\r\n      if (node.type === 'TABLE') return '#3498db'; // 蓝色\r\n      if (node.type === 'DYN_TABLE') return '#f39c12'; // 橙色\r\n      return '#95a5a6'; // 默认灰色\r\n    };\r\n    \r\n    // 获取链接颜色\r\n    const getLinkColor = (link) => {\r\n      if (link.confidence < confidenceThreshold.value) {\r\n        return '#e74c3c'; // 红色，置信度低\r\n      }\r\n      if (link.type === 'CALLS') return '#9b59b6'; // 紫色\r\n      if (link.type === 'REFERENCES') return '#2ecc71'; // 绿色\r\n      if (link.type === 'DYN_REFERENCES') return '#f39c12'; // 橙色\r\n      return '#95a5a6'; // 默认灰色\r\n    };\r\n    \r\n    // 获取链接宽度\r\n    const getLinkWidth = (link) => {\r\n      return (link.confidence || 0.5) * 3; // 根据置信度调整宽度\r\n    };\r\n    \r\n    // 创建节点对象（3D）\r\n    const createNodeObject = (node) => {\r\n      // 使用SpriteText显示节点名称\r\n      const sprite = new SpriteText(node.name);\r\n      sprite.color = getNodeColor(node);\r\n      sprite.textHeight = 8;\r\n      sprite.backgroundColor = 'rgba(0,0,0,0.7)';\r\n      sprite.padding = 2;\r\n      sprite.borderRadius = 3;\r\n      \r\n      // 创建节点球体\r\n      const geometry = new THREE.SphereGeometry(node.type === 'SP' ? 5 : 4);\r\n      const material = new THREE.MeshLambertMaterial({\r\n        color: getNodeColor(node),\r\n        transparent: true,\r\n        opacity: node.confidence || 1\r\n      });\r\n      const mesh = new THREE.Mesh(geometry, material);\r\n      \r\n      // 组合成一个组\r\n      const group = new THREE.Group();\r\n      group.add(mesh);\r\n      \r\n      // 将文本精灵放在球体上方\r\n      sprite.position.y = 8;\r\n      group.add(sprite);\r\n      \r\n      return group;\r\n    };\r\n    \r\n    // 创建节点画布（2D）\r\n    const createNodeCanvas = (node, ctx, globalScale) => {\r\n      const size = node.type === 'SP' ? 10 : 8;\r\n      const fontSize = 12 / globalScale;\r\n      const label = node.name;\r\n      \r\n      // 绘制节点\r\n      ctx.beginPath();\r\n      ctx.arc(node.x, node.y, size, 0, 2 * Math.PI);\r\n      ctx.fillStyle = getNodeColor(node);\r\n      ctx.fill();\r\n      \r\n      // 绘制边框\r\n      ctx.strokeStyle = '#ffffff';\r\n      ctx.lineWidth = 0.5;\r\n      ctx.stroke();\r\n      \r\n      // 绘制文本\r\n      ctx.font = `${fontSize}px Sans-Serif`;\r\n      ctx.textAlign = 'center';\r\n      ctx.textBaseline = 'middle';\r\n      ctx.fillStyle = '#ffffff';\r\n      ctx.fillText(label, node.x, node.y - size - fontSize);\r\n    };\r\n    \r\n    // 获取节点提示文本\r\n    const getNodeTooltip = (node) => {\r\n      let tooltip = `<div class=\"tooltip\">`;\r\n      tooltip += `<div class=\"title\">${node.name}</div>`;\r\n      tooltip += `<div class=\"type\">${node.type}</div>`;\r\n      \r\n      if (node.type === 'SP') {\r\n        tooltip += `<div>复杂度: ${node.complexity || 'N/A'}</div>`;\r\n        if (node.last_modified) {\r\n          tooltip += `<div>最后修改: ${node.last_modified}</div>`;\r\n        }\r\n      }\r\n      \r\n      if (node.type === 'TABLE' || node.type === 'DYN_TABLE') {\r\n        if (node.schema) {\r\n          tooltip += `<div>模式: ${node.schema}</div>`;\r\n        }\r\n        if (node.is_core) {\r\n          tooltip += `<div class=\"warning\">核心表</div>`;\r\n        }\r\n      }\r\n      \r\n      if (node.confidence) {\r\n        tooltip += `<div>置信度: ${(node.confidence * 100).toFixed(0)}%</div>`;\r\n      }\r\n      \r\n      tooltip += `</div>`;\r\n      return tooltip;\r\n    };\r\n    \r\n    // 获取链接提示文本\r\n    const getLinkTooltip = (link) => {\r\n      let tooltip = `<div class=\"tooltip\">`;\r\n      tooltip += `<div class=\"title\">${link.type}</div>`;\r\n      \r\n      if (link.type === 'CALLS') {\r\n        tooltip += `<div>深度: ${link.depth || 1}</div>`;\r\n        if (link.frequency) {\r\n          tooltip += `<div>频率: ${link.frequency}</div>`;\r\n        }\r\n      }\r\n      \r\n      if (link.type === 'REFERENCES' || link.type === 'DYN_REFERENCES') {\r\n        if (link.operation) {\r\n          tooltip += `<div>操作: ${link.operation}</div>`;\r\n        }\r\n        if (link.type === 'DYN_REFERENCES' && link.need_verify) {\r\n          tooltip += `<div class=\"warning\">需要验证</div>`;\r\n        }\r\n      }\r\n      \r\n      if (link.confidence) {\r\n        tooltip += `<div>置信度: ${(link.confidence * 100).toFixed(0)}%</div>`;\r\n      }\r\n      \r\n      tooltip += `</div>`;\r\n      return tooltip;\r\n    };\r\n    \r\n    // 处理节点点击事件\r\n    const handleNodeClick = (node) => {\r\n      selectedNode.value = node;\r\n      highlightNode(node);\r\n    };\r\n    \r\n    // 清除选择\r\n    const clearSelection = () => {\r\n      selectedNode.value = null;\r\n      resetHighlight();\r\n    };\r\n    \r\n    // 高亮节点及相关链接\r\n    const highlightNode = (node) => {\r\n      const { nodes, links } = graphData.value;\r\n      \r\n      // 重置所有节点和链接的透明度\r\n      nodes.forEach(n => {\r\n        n.__highlighted = false;\r\n        n.__opacity = 0.2;\r\n      });\r\n      \r\n      links.forEach(l => {\r\n        l.__highlighted = false;\r\n        l.__opacity = 0.1;\r\n      });\r\n      \r\n      // 高亮选中的节点\r\n      node.__highlighted = true;\r\n      node.__opacity = 1;\r\n      \r\n      // 查找相关链接和节点\r\n      const connectedLinks = links.filter(l => l.source === node || l.target === node);\r\n      connectedLinks.forEach(l => {\r\n        l.__highlighted = true;\r\n        l.__opacity = 1;\r\n        \r\n        // 高亮链接的另一端节点\r\n        const connectedNode = l.source === node ? l.target : l.source;\r\n        connectedNode.__highlighted = true;\r\n        connectedNode.__opacity = 0.8;\r\n      });\r\n      \r\n      // 更新图谱\r\n      updateNodesAppearance();\r\n    };\r\n    \r\n    // 重置高亮\r\n    const resetHighlight = () => {\r\n      const { nodes, links } = graphData.value;\r\n      \r\n      nodes.forEach(n => {\r\n        n.__highlighted = false;\r\n        n.__opacity = 1;\r\n      });\r\n      \r\n      links.forEach(l => {\r\n        l.__highlighted = false;\r\n        l.__opacity = 1;\r\n      });\r\n      \r\n      updateNodesAppearance();\r\n    };\r\n    \r\n    // 更新节点外观\r\n    const updateNodesAppearance = () => {\r\n      if (is3D.value) {\r\n        // 更新3D节点\r\n        graph.value\r\n          .nodeThreeObjectExtend(false)\r\n          .nodeThreeObject(node => createNodeObject(node))\r\n          .linkOpacity(link => link.__opacity !== undefined ? link.__opacity : 1);\r\n      } else {\r\n        // 更新2D节点\r\n        graph.value\r\n          .nodeCanvasObject((node, ctx, globalScale) => createNodeCanvas(node, ctx, globalScale))\r\n          .linkOpacity(link => link.__opacity !== undefined ? link.__opacity : 1);\r\n      }\r\n    };\r\n    \r\n    // 搜索节点\r\n    const searchNode = async () => {\r\n      if (!searchTerm.value) return;\r\n      \r\n      try {\r\n        const response = await fetch(`${props.apiBaseUrl}/search?keyword=${encodeURIComponent(searchTerm.value)}`);\r\n        const data = await response.json();\r\n        \r\n        if (data.procedures && data.procedures.length > 0) {\r\n          // 找到匹配的节点\r\n          const procedure = data.procedures[0];\r\n          const node = graphData.value.nodes.find(n => n.name === procedure.name);\r\n          \r\n          if (node) {\r\n            // 高亮节点\r\n            handleNodeClick(node);\r\n            \r\n            // 聚焦到节点\r\n            const distance = is3D.value ? 100 : 250;\r\n            graph.value.centerAt(node.x, node.y, distance);\r\n            \r\n            if (is3D.value) {\r\n              graph.value.cameraPosition(\r\n                { x: node.x, y: node.y, z: distance },\r\n                node,\r\n                2000\r\n              );\r\n            }\r\n          } else {\r\n            // 如果节点不在当前图谱中，加载该节点的调用链\r\n            loadCallChain(procedure.name);\r\n          }\r\n        } else {\r\n          alert('未找到匹配的节点');\r\n        }\r\n      } catch (error) {\r\n        console.error('搜索失败', error);\r\n        alert('搜索失败，请重试');\r\n      }\r\n    };\r\n    \r\n    // 加载调用链\r\n    const loadCallChain = async (nodeName) => {\r\n      try {\r\n        const response = await fetch(\r\n          `${props.apiBaseUrl}/call-chain/${nodeName}?depth=${depth.value}&confidence=${confidenceThreshold.value}`\r\n        );\r\n        const data = await response.json();\r\n        \r\n        // 加载新数据\r\n        loadData(data);\r\n        \r\n        // 查找并高亮目标节点\r\n        const node = data.nodes.find(n => n.name === nodeName);\r\n        if (node) {\r\n          handleNodeClick(node);\r\n        }\r\n      } catch (error) {\r\n        console.error('加载调用链失败', error);\r\n        alert('加载调用链失败，请重试');\r\n      }\r\n    };\r\n    \r\n    // 加载节点详细信息\r\n    const loadDetails = async (nodeId) => {\r\n      try {\r\n        const node = graphData.value.nodes.find(n => n.id === nodeId);\r\n        if (!node) return;\r\n        \r\n        const response = await fetch(`${props.apiBaseUrl}/procedure/${node.name}`);\r\n        const data = await response.json();\r\n        \r\n        // 显示详细信息（可以在这里添加更多逻辑）\r\n        alert(`${node.name} 详细信息\\n调用的存储过程: ${data.called_sps.length}\\n引用的表: ${data.referenced_tables.length}`);\r\n      } catch (error) {\r\n        console.error('加载详细信息失败', error);\r\n        alert('加载详细信息失败，请重试');\r\n      }\r\n    };\r\n    \r\n    // 分析影响\r\n    const analyzeImpact = async (nodeId) => {\r\n      try {\r\n        const node = graphData.value.nodes.find(n => n.id === nodeId);\r\n        if (!node) return;\r\n        \r\n        const response = await fetch(`${props.apiBaseUrl}/impact/${node.name}?depth=${depth.value}`);\r\n        const data = await response.json();\r\n        \r\n        // 显示影响分析结果\r\n        alert(`${node.name} 影响分析\\n受影响节点总数: ${data.total_affected}\\n受影响存储过程: ${data.affected_sps}\\n受影响表: ${data.affected_tables}`);\r\n      } catch (error) {\r\n        console.error('影响分析失败', error);\r\n        alert('影响分析失败，请重试');\r\n      }\r\n    };\r\n    \r\n    // 调用链深度改变\r\n    const depthChanged = () => {\r\n      if (selectedNode.value) {\r\n        loadCallChain(selectedNode.value.name);\r\n      }\r\n    };\r\n    \r\n    // 置信度阈值改变\r\n    const confidenceChanged = () => {\r\n      // 更新链接颜色和宽度\r\n      const { links } = graphData.value;\r\n      links.forEach(link => {\r\n        link.__opacity = link.confidence >= confidenceThreshold.value ? 1 : 0.3;\r\n      });\r\n      \r\n      updateNodesAppearance();\r\n    };\r\n    \r\n    // 切换2D/3D视图\r\n    const toggleView = () => {\r\n      is3D.value = !is3D.value;\r\n      \r\n      // 保存当前数据\r\n      const currentData = graphData.value;\r\n      \r\n      // 清理当前图谱\r\n      if (graph.value) {\r\n        graph.value._destructor();\r\n      }\r\n      \r\n      // 重新初始化\r\n      initGraph();\r\n      \r\n      // 重新加载数据\r\n      loadData(currentData);\r\n    };\r\n    \r\n    // 重置相机位置\r\n    const resetCamera = () => {\r\n      if (is3D.value) {\r\n        graph.value.cameraPosition({ x: 0, y: 0, z: 250 }, { x: 0, y: 0, z: 0 }, 1000);\r\n      } else {\r\n        graph.value.centerAt(0, 0, 1000);\r\n        graph.value.zoom(1, 1000);\r\n      }\r\n    };\r\n    \r\n    // 导出图像\r\n    const exportImage = () => {\r\n      try {\r\n        const canvas = graphContainer.value.querySelector('canvas');\r\n        if (!canvas) return;\r\n        \r\n        canvas.toBlob(blob => {\r\n          saveAs(blob, `oracle-sp-graph-${new Date().toISOString().slice(0, 10)}.png`);\r\n        });\r\n      } catch (error) {\r\n        console.error('导出图像失败', error);\r\n        alert('导出图像失败，请重试');\r\n      }\r\n    };\r\n    \r\n    // 关闭详细信息面板\r\n    const closeDetails = () => {\r\n      selectedNode.value = null;\r\n    };\r\n    \r\n    return {\r\n      graphContainer,\r\n      searchTerm,\r\n      selectedNode,\r\n      depth,\r\n      confidenceThreshold,\r\n      is3D,\r\n      searchNode,\r\n      loadDetails,\r\n      analyzeImpact,\r\n      closeDetails,\r\n      depthChanged,\r\n      confidenceChanged,\r\n      toggleView,\r\n      resetCamera,\r\n      exportImage\r\n    };\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.graph-container {\r\n  width: 100%;\r\n  height: 80vh;\r\n  background-color: #111;\r\n  position: relative;\r\n}\r\n\r\n.controls {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 10px;\r\n  padding: 10px;\r\n  background-color: #f8f9fa;\r\n  border-bottom: 1px solid #dee2e6;\r\n}\r\n\r\n.search-box {\r\n  display: flex;\r\n  gap: 5px;\r\n}\r\n\r\n.search-box input {\r\n  padding: 5px 10px;\r\n  border: 1px solid #ced4da;\r\n  border-radius: 4px;\r\n  width: 200px;\r\n}\r\n\r\n.sliders {\r\n  display: flex;\r\n  gap: 20px;\r\n}\r\n\r\n.slider-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 150px;\r\n}\r\n\r\n.view-controls {\r\n  display: flex;\r\n  gap: 5px;\r\n}\r\n\r\nbutton {\r\n  padding: 5px 10px;\r\n  background-color: #007bff;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n}\r\n\r\nbutton:hover {\r\n  background-color: #0069d9;\r\n}\r\n\r\n.legend {\r\n  display: flex;\r\n  gap: 15px;\r\n  margin-left: auto;\r\n}\r\n\r\n.legend-item {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 5px;\r\n}\r\n\r\n.color-box {\r\n  width: 15px;\r\n  height: 15px;\r\n  border-radius: 3px;\r\n}\r\n\r\n.sp-color {\r\n  background-color: #e74c3c;\r\n}\r\n\r\n.table-color {\r\n  background-color: #3498db;\r\n}\r\n\r\n.dyn-table-color {\r\n  background-color: #f39c12;\r\n}\r\n\r\n.calls-color {\r\n  background-color: #9b59b6;\r\n}\r\n\r\n.ref-color {\r\n  background-color: #2ecc71;\r\n}\r\n\r\n.node-details {\r\n  position: absolute;\r\n  top: 20px;\r\n  right: 20px;\r\n  background-color: rgba(255, 255, 255, 0.9);\r\n  border-radius: 5px;\r\n  padding: 15px;\r\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);\r\n  max-width: 300px;\r\n}\r\n\r\n.node-details h3 {\r\n  margin-top: 0;\r\n  border-bottom: 1px solid #ddd;\r\n  padding-bottom: 5px;\r\n}\r\n\r\n.core-table {\r\n  color: #e74c3c;\r\n  font-weight: bold;\r\n}\r\n\r\n.confidence {\r\n  margin: 10px 0;\r\n}\r\n\r\n.confidence-bar {\r\n  height: 8px;\r\n  background-color: #e9ecef;\r\n  border-radius: 4px;\r\n  overflow: hidden;\r\n}\r\n\r\n.confidence-fill {\r\n  height: 100%;\r\n  background-color: #28a745;\r\n  border-radius: 4px;\r\n}\r\n\r\n.tooltip {\r\n  background-color: rgba(0, 0, 0, 0.8);\r\n  color: white;\r\n  padding: 8px;\r\n  border-radius: 4px;\r\n  font-size: 12px;\r\n  max-width: 200px;\r\n}\r\n\r\n.tooltip .title {\r\n  font-weight: bold;\r\n  margin-bottom: 5px;\r\n}\r\n\r\n.tooltip .type {\r\n  font-style: italic;\r\n  color: #aaa;\r\n  margin-bottom: 5px;\r\n}\r\n\r\n.tooltip .warning {\r\n  color: #f39c12;\r\n  font-weight: bold;\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}