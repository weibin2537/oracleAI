{"version":3,"file":"three-spritetext.js","sources":["../src/index.js"],"sourcesContent":["import {\n  CanvasTexture,\n  Sprite,\n  SpriteMaterial,\n  SRGBColorSpace\n} from 'three';\n\nconst three = typeof window !== 'undefined' && window.THREE\n  ? window.THREE // Prefer consumption from global THREE, if exists\n  : {\n  CanvasTexture,\n  Sprite,\n  SpriteMaterial,\n  SRGBColorSpace\n};\n\nexport default class extends three.Sprite {\n  constructor(text = '', textHeight = 10, color = 'rgba(255, 255, 255, 1)') {\n    super(new three.SpriteMaterial());\n\n    this._text = `${text}`;\n    this._textHeight = textHeight;\n    this._color = color;\n    this._backgroundColor = false; // no background color\n\n    this._padding = 0;\n    this._borderWidth = 0;\n    this._borderRadius = 0;\n    this._borderColor = 'white';\n\n    this._strokeWidth = 0;\n    this._strokeColor = 'white';\n\n    this._fontFace = 'system-ui';\n    this._fontSize = 90; // defines text resolution\n    this._fontWeight = 'normal';\n\n    this._canvas = document.createElement('canvas');\n\n    this._genCanvas();\n  }\n\n  get text() { return this._text; }\n  set text(text) { this._text = text; this._genCanvas(); }\n  get textHeight() { return this._textHeight; }\n  set textHeight(textHeight) { this._textHeight = textHeight; this._genCanvas(); }\n  get color() { return this._color; }\n  set color(color) { this._color = color; this._genCanvas(); }\n  get backgroundColor() { return this._backgroundColor; }\n  set backgroundColor(color) { this._backgroundColor = color; this._genCanvas(); }\n  get padding() { return this._padding; }\n  set padding(padding) { this._padding = padding; this._genCanvas(); }\n  get borderWidth() { return this._borderWidth; }\n  set borderWidth(borderWidth) { this._borderWidth = borderWidth; this._genCanvas(); }\n  get borderRadius() { return this._borderRadius; }\n  set borderRadius(borderRadius) { this._borderRadius = borderRadius; this._genCanvas(); }\n  get borderColor() { return this._borderColor; }\n  set borderColor(borderColor) { this._borderColor = borderColor; this._genCanvas(); }\n  get fontFace() { return this._fontFace; }\n  set fontFace(fontFace) { this._fontFace = fontFace; this._genCanvas(); }\n  get fontSize() { return this._fontSize; }\n  set fontSize(fontSize) { this._fontSize = fontSize; this._genCanvas(); }\n  get fontWeight() { return this._fontWeight; }\n  set fontWeight(fontWeight) { this._fontWeight = fontWeight; this._genCanvas(); }\n  get strokeWidth() { return this._strokeWidth; }\n  set strokeWidth(strokeWidth) { this._strokeWidth = strokeWidth; this._genCanvas(); }\n  get strokeColor() { return this._strokeColor; }\n  set strokeColor(strokeColor) { this._strokeColor = strokeColor; this._genCanvas(); }\n\n  _genCanvas() {\n    const canvas = this._canvas;\n    const ctx = canvas.getContext('2d');\n\n    const relFactor = 1 / this.textHeight;\n\n    const border = Array.isArray(this.borderWidth) ? this.borderWidth : [this.borderWidth, this.borderWidth]; // x,y border\n    const relBorder = border.map(b => b * this.fontSize * relFactor); // border in canvas units\n\n    const borderRadius = Array.isArray(this.borderRadius) ? this.borderRadius : [this.borderRadius, this.borderRadius, this.borderRadius, this.borderRadius]; // tl tr br bl corners\n    const relBorderRadius = borderRadius.map(b => b * this.fontSize * relFactor); // border radius in canvas units\n\n    const padding = Array.isArray(this.padding) ? this.padding : [this.padding, this.padding]; // x,y padding\n    const relPadding = padding.map(p => p * this.fontSize * relFactor); // padding in canvas units\n\n    const lines = this.text.split('\\n');\n    const font = `${this.fontWeight} ${this.fontSize}px ${this.fontFace}`;\n\n    ctx.font = font; // measure canvas with appropriate font\n    const innerWidth = Math.max(...lines.map(line => ctx.measureText(line).width));\n    const innerHeight = this.fontSize * lines.length;\n    canvas.width = innerWidth + relBorder[0] * 2 + relPadding[0] * 2;\n    canvas.height = innerHeight + relBorder[1] * 2 + relPadding[1] * 2;\n\n    // paint border\n    if (this.borderWidth) {\n      ctx.strokeStyle = this.borderColor;\n\n      if (relBorder[0]) { // left + right borders\n        const hb = relBorder[0] / 2;\n        ctx.lineWidth = relBorder[0];\n        ctx.beginPath();\n        ctx.moveTo(hb, relBorderRadius[0]);\n        ctx.lineTo(hb, canvas.height - relBorderRadius[3]);\n        ctx.moveTo(canvas.width - hb, relBorderRadius[1]);\n        ctx.lineTo(canvas.width - hb, canvas.height - relBorderRadius[2]);\n        ctx.stroke();\n      }\n\n      if (relBorder[1]) { // top + bottom borders\n        const hb = relBorder[1] / 2;\n        ctx.lineWidth = relBorder[1];\n        ctx.beginPath();\n        ctx.moveTo(Math.max(relBorder[0], relBorderRadius[0]), hb);\n        ctx.lineTo(canvas.width - Math.max(relBorder[0], relBorderRadius[1]), hb);\n        ctx.moveTo(Math.max(relBorder[0], relBorderRadius[3]), canvas.height - hb);\n        ctx.lineTo(canvas.width - Math.max(relBorder[0], relBorderRadius[2]), canvas.height - hb);\n        ctx.stroke();\n      }\n\n      if (this.borderRadius) { // strike rounded corners\n        const cornerWidth = Math.max(...relBorder);\n        const hb = cornerWidth / 2;\n        ctx.lineWidth = cornerWidth;\n        ctx.beginPath();\n        [\n          !!relBorderRadius[0] && [relBorderRadius[0], hb, hb, relBorderRadius[0]],\n          !!relBorderRadius[1] && [canvas.width - relBorderRadius[1], canvas.width - hb, hb, relBorderRadius[1]],\n          !!relBorderRadius[2] && [canvas.width - relBorderRadius[2], canvas.width - hb, canvas.height - hb, canvas.height - relBorderRadius[2]],\n          !!relBorderRadius[3] && [relBorderRadius[3], hb, canvas.height - hb, canvas.height - relBorderRadius[3]]\n        ].filter(d => d).forEach(([x0, x1, y0, y1]) => {\n          ctx.moveTo(x0, y0);\n          ctx.quadraticCurveTo(x1, y0, x1, y1);\n        });\n        ctx.stroke();\n      }\n    }\n\n    // paint background\n    if (this.backgroundColor) {\n      ctx.fillStyle = this.backgroundColor;\n      if (!this.borderRadius) {\n        ctx.fillRect(relBorder[0], relBorder[1], canvas.width - relBorder[0] * 2, canvas.height - relBorder[1] * 2);\n      } else { // fill with rounded corners\n        ctx.beginPath();\n        ctx.moveTo(relBorder[0], relBorderRadius[0]);\n        [\n          [relBorder[0], relBorderRadius[0], canvas.width - relBorderRadius[1], relBorder[1], relBorder[1], relBorder[1]], // t\n          [canvas.width - relBorder[0], canvas.width - relBorder[0], canvas.width - relBorder[0], relBorder[1], relBorderRadius[1], canvas.height - relBorderRadius[2]], // r\n          [canvas.width - relBorder[0], canvas.width - relBorderRadius[2], relBorderRadius[3], canvas.height - relBorder[1], canvas.height - relBorder[1], canvas.height - relBorder[1]], // b\n          [relBorder[0], relBorder[0], relBorder[0], canvas.height - relBorder[1], canvas.height - relBorderRadius[3], relBorderRadius[0]], // t\n        ].forEach(([x0, x1, x2, y0, y1, y2]) => {\n          ctx.quadraticCurveTo(x0, y0, x1, y1);\n          ctx.lineTo(x2, y2);\n        });\n        ctx.closePath();\n        ctx.fill();\n      }\n    }\n\n    ctx.translate(...relBorder);\n    ctx.translate(...relPadding);\n\n    // paint text\n    ctx.font = font; // Set font again after canvas is resized, as context properties are reset\n    ctx.fillStyle = this.color;\n    ctx.textBaseline = 'bottom';\n\n    const drawTextStroke = this.strokeWidth > 0;\n    if (drawTextStroke) {\n      ctx.lineWidth = this.strokeWidth * this.fontSize / 10;\n      ctx.strokeStyle = this.strokeColor;\n    }\n\n    lines.forEach((line, index) => {\n      const lineX = (innerWidth - ctx.measureText(line).width) / 2;\n      const lineY = (index + 1) * this.fontSize;\n\n      drawTextStroke && ctx.strokeText(line, lineX, lineY);\n      ctx.fillText(line, lineX, lineY);\n    });\n\n    // Inject canvas into sprite\n    if (this.material.map) this.material.map.dispose(); // gc previous texture\n    const texture = this.material.map = new three.CanvasTexture(canvas);\n    texture.colorSpace = three.SRGBColorSpace;\n\n    const yScale = this.textHeight * lines.length + border[1] * 2 + padding[1] * 2;\n    this.scale.set(yScale * canvas.width / canvas.height, yScale, 0);\n  }\n\n  clone() {\n    return new this.constructor(this.text, this.textHeight, this.color).copy(this);\n  }\n\n  copy(source) {\n    three.Sprite.prototype.copy.call(this, source);\n\n    this.color = source.color;\n    this.backgroundColor = source.backgroundColor;\n    this.padding = source.padding;\n    this.borderWidth = source.borderWidth;\n    this.borderColor = source.borderColor;\n    this.fontFace = source.fontFace;\n    this.fontSize = source.fontSize;\n    this.fontWeight = source.fontWeight;\n    this.strokeWidth = source.strokeWidth;\n    this.strokeColor = source.strokeColor;\n\n    return this;\n  }\n}\n"],"names":["three","window","THREE","CanvasTexture","Sprite","SpriteMaterial","SRGBColorSpace","_default","_three$Sprite","_this","text","arguments","length","undefined","textHeight","color","_classCallCheck","_callSuper","_text","concat","_textHeight","_color","_backgroundColor","_padding","_borderWidth","_borderRadius","_borderColor","_strokeWidth","_strokeColor","_fontFace","_fontSize","_fontWeight","_canvas","document","createElement","_genCanvas","_inherits","_createClass","key","get","set","padding","borderWidth","borderRadius","borderColor","fontFace","fontSize","fontWeight","strokeWidth","strokeColor","value","_this2","canvas","ctx","getContext","relFactor","border","Array","isArray","relBorder","map","b","relBorderRadius","relPadding","p","lines","split","font","innerWidth","Math","max","apply","_toConsumableArray","line","measureText","width","innerHeight","height","strokeStyle","hb","lineWidth","beginPath","moveTo","lineTo","stroke","cornerWidth","filter","d","forEach","_ref","_ref2","_slicedToArray","x0","x1","y0","y1","quadraticCurveTo","backgroundColor","fillStyle","fillRect","_ref3","_ref4","x2","y2","closePath","fill","translate","textBaseline","drawTextStroke","index","lineX","lineY","strokeText","fillText","material","dispose","texture","colorSpace","yScale","scale","clone","constructor","copy","source","prototype","call"],"mappings":"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"}